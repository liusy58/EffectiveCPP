o	maze_seq.c: Sequential version (SEQ).
o	maze_fg.c: Fine-grained parallel work-queue implementation (PWQ).
o	maze_part.c: Partitioned parallel implementation (PART).
o	maze_2seq.c: The sequential coroutine implementation (COPART).
o	maze.h: Common definitions.
o	maze_parallel.h: Common definitions for parallel implementations.
o	maze.c: Common functions, also help text for command line.
o	Makefile: As you would expect...

o	mazecmp.bash: Generate a random maze and solve with all solvers.
o	mazegen.bash: Generate a random maze, solve sequentially, and
		output a pair of .fig files, one with solution and the
		other without.  (Used for human maze solvers.)
o	mazeq.sh: Repeatedly generate mazes until a maze of the specified
		quality (or better) is generated.  Quality is the length
		of the solution divided by the minimal-length possible
		path.
o	mazethread.bash: Generate a square maze and solve with all solvers,
		using the specified number of threads.
o	plots.sh: Produce a full set of plots from the data produced
		by runmazecmp.bash and reduced by reducemazecmp.bash.
o	productionplots.bash: Produce production-quality plots for
		HOTPAR paper.  Data produced by @@@ and @@@
o	reduce.bash:  Bash functions for various data-reduction
		transformations.
o	reducemazecmp.bash: Reduce the output of a series of mazecmp.sh
		runs, for example, as generated by runmazecmp.bash.
o	reducemazethread.bash: Reduce the output of a series of
		mazethread.bash runs, for example, as generated by
		runmazethread.bash.
o	reducerectmazecmp.bash: Reduce the output of a series of
		mazecmp.sh runs, for example, as generated by @@@.
o	runmazecmp.bash: Run a series of mazecmp.bash runs.
o	runmazethread.bash: Run a series of mazethread.bash runs,
		varying the number of threads.
o	runrectmazecmp.bash: Run a series of mazecmp.bash runs having
		the same number of cells, varying the shape from
		linear though rectangular to square.
