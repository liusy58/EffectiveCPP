http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_skip.aspx

	Balanced skiplist.  Also rebalancing.  No dynamic determination.

http://groups.csail.mit.edu/mag/oshman-shavit-podc13.pdf

	Limited-height concurrent skiplist feeds into X-Fast Trie.
	No rebalancing.

Herlihy and Shavit, Art of Multiprocessor Programming

	Concurrent skiplist.  No rebalancing.

http://kaba.hilvi.org/pastel-1.4.0/pastel/sys/skiplist/skiplist_insert.hpp.htm

	Rebalancing.  Not concurrent?

http://www.mi.fu-berlin.de/wiki/pub/ABI/AnalysisMethodsWS11/skiplist.pdf

	Rebalancing.  Not concurrent?
	Randomly rebalances during search(!).

http://baptiste-wicht.com/publication_store/btrees.pdf

	Looks at a number of search trees, but auto-rebalancing tree
	is not a skiplist.

http://www.cs.utoronto.ca/~tabrown/chromatic/fullpaper.pdf

	Compares skiplist to "Chromatic Tree".

https://lwn.net/Articles/551896/

	Skiplists in the kernel.  A history of skiplists.

https://hal.inria.fr/hal-00699794v3/document

	Maintenance thread scans skiplist and rebalances.

http://poseidon.it.usyd.edu.au/~gramoli/web/doc/pubs/rotating-skiplist-preprint-2016.pdf

	"Wheel"-based skiplist-like data structure.  Each node has
	a limited number of pointers, constraining the shape of the
	corresponding tree.  Claims better speed due to fewer cache
	misses.  Mentions RCU, cites the IBM System Journal paper.
