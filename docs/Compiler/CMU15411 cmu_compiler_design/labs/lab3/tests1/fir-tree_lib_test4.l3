#test return 60






int bits_exists(bits:int,ind:int)
{
  return ((1 << ind) & bits);
}

int bits_is_leaf(bits:int,ind:int)
{
 if ((ind > 30) || (ind < 0)) return -1;
 if (bits_exists(bits,ind))
 {
  if (ind >= 15) return 1;
  else return !(bits_exists(bits,(2 * (1 + ind) - 1)) &&
      bits_exists(bits,(2 * (1 + ind))));
 }
 return 0;
}
int bits_get_size(bits:int,ind:int)
{
 var size:int;
 size = 0;
 if ((ind > 30) || (ind < 0)) return -1;
 if (bits_exists(bits,ind))
 {
  if (ind >=15) return 1;
  size = bits_get_size(bits,(2 * (1 + ind) - 1));
  size += 1;
  size += bits_get_size(bits,(2 * (1 + ind)));
 }
 return size;
}

int bits_min_ind(bits:int,ind:int)
{
 var ret:int;
 if ((ind > 30) || (ind < 0)) return -1;
 if (bits_exists(bits,ind))
 {
  if (ind >=15) return ind;
  ret = bits_min_ind(bits,(2 * (1 + ind) - 1));
  if (ret < 0) return ind;
  else return ret;
 }
 return -1;

}


int main ()
{
  var bits,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31:int;
 var ret,ind,test:int;
 ret = 0;
 ind = 0;
 test = 0;

  bits=(~(1<<31)); n1=16; n2=8; n3=24; n4=4; n5=12; n6=20; n7=28; n8=2; n9=6; n10=10; n11=14; n12=18; n13=22; n14=26; n15=30; n16=1; n17=3; n18=5; n19=7; n20=9; n21=11; n22=13; n23=15; n24=17; n25=19; n26=21; n27=23; n28=25; n29=27; n30=29; n31=31;

 if (bits_get_size(bits,50) != -1)
 {
  return (1/0);
 }
 ret = bits_get_size(bits,0);
 bits &= (~(1 << 16));
 ret += bits_get_size(bits,1);
 ret += bits_get_size(bits,2);
 return ret;
}
