#test return 40

extern int printchar(c : int);
// extern int abs(x : int);

// construct all n-queens solutions

int abs(x : int) {
  return x >= 0 ? x : -x;
}

bool isSolution(a : int[], k : int , n : int) {
  return k == n;
}

int constructCandidates(a : int[], k : int, n : int, c : int[]) {
  var i, j, nc : int;
  var legal : bool;

  nc = 0;
  for (i = 1; i <= n; i += 1) {
    legal = true;
	for (j = 1; j < k; j += 1) {
      // diagonal threat
	  if (abs(k - j) == abs(i - a[j]))
	    legal = false;
      // column threat
	  if (i == a[j])
	    legal = false;
	}
	if (legal) {
	  c[nc] = i;
	  nc += 1;
	}
  }
  
  return nc;
}

int processSolution(a : int[], k : int) {
  var i : int;
  
  printchar(40);
  printchar(32);
  for (i = 1; i <= k; i += 1) {
      printchar(48 + a[i]);
	  printchar(32);
  }
  printchar(41);
  printchar(10);
  
  return 0;
}

int main() {
  var a : int[];
  var n : int;
  
  n = 7;
  a = new(int[n + 1]);
  
  return backtrack(a, 0, n);
}


// general backtracking algorithm

int backtrack(a : int[], k : int, n : int) {
  var c : int[];
  var i, ncandidates, MAX_CANDIDATES, solutions : int;
  
  solutions = 0;
  MAX_CANDIDATES = n;
  c = new(int[MAX_CANDIDATES]);
  
  if (isSolution(a, k, n)) {
    processSolution(a, k);
	solutions = 1;
  }
  else {
    k += 1;
	ncandidates = constructCandidates(a, k, n, c);
	for (i = 0; i < ncandidates; i += 1) {
	  a[k] = c[i];
	  solutions += backtrack(a, k, n);
	}
  }
  return solutions;
}
