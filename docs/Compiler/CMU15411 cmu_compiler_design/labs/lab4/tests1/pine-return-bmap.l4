#test return 2500

/* Binary Map
 * Author: matthewj
 */

struct b_t {
    key : int;
    val : int;
    left : b_t *;
    right : b_t *;
};

b_t *nn(k : int, v : int) {
    var n : b_t *;
    n = new(b_t);
    n->key = k;
    n->val = v;
    n->left = NULL;
    n->right = NULL;
    return n;
}

b_t *put(t :  b_t *, k : int, v : int) {
    var _ : b_t *;
    if (k < t->key) {
        if (t->left != NULL) {
            _ = put(t->left, k, v);
            return t;
        }
        t->left = nn(k, v);
        return t;
    }
    if (k > t->key) {
        if (t->right != NULL) {
            _ = put(t->right, k, v);
            return t;
        }
        t->right = nn(k, v);
        return t;
    }
    t->val = v;
    return t;
}

int look(t : b_t *, k : int) {
    if (t == NULL) { return 0; }
    if (k > t->key) {
        return look(t->right, k);
    }
    if (k < t->key) {
        return look(t->left, k);
    }
    return t->val;
}

int main() {
    var t : b_t *;
    var i : int;
    var j : int;

    t = nn(0, 0);
    for (i = 0; i < 49; i += 1) {
        j = 50 + i;
        t = put(t, j, j * j);
        j = 50 - i;
        t = put(t, j, j * j);
    }

    return look(t, 50);
}
