Opening files...
Parsing specification from standard input...
Checking specification...
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]ID [3]INT [4]LBRACE 
[5]RBRACE [6]LPAREN [7]RPAREN [8]SEMICOL [9]PLUS 
[10]MINUS [11]TIMES [12]DIVIDE [13]ASSIGN [14]MOD 
[15]NEG [16]PLUSASSIGN [17]MINUSASSIGN [18]TIMESASSIGN [19]DIVIDEASSIGN 
[20]MODASSIGN [21]RETURN 

===== Non terminals =====
[0]$START [1]program [2]stmtseq [3]stmt [4]assgnstmt 
[5]expr [6]lval 

===== Productions =====
[0] $START ::= program EOF 
[1] program ::= LBRACE stmtseq RETURN expr SEMICOL RBRACE 
[2] program ::= LBRACE RETURN expr SEMICOL RBRACE 
[3] stmtseq ::= stmt 
[4] stmtseq ::= stmt stmtseq 
[5] stmt ::= assgnstmt SEMICOL 
[6] lval ::= ID 
[7] assgnstmt ::= lval ASSIGN expr 
[8] assgnstmt ::= lval PLUSASSIGN expr 
[9] assgnstmt ::= lval MINUSASSIGN expr 
[10] assgnstmt ::= lval TIMESASSIGN expr 
[11] assgnstmt ::= lval DIVIDEASSIGN expr 
[12] assgnstmt ::= lval MODASSIGN expr 
[13] expr ::= LPAREN expr RPAREN 
[14] expr ::= INT 
[15] expr ::= ID 
[16] expr ::= MINUS expr 
[17] expr ::= expr PLUS expr 
[18] expr ::= expr MINUS expr 
[19] expr ::= expr TIMES expr 
[20] expr ::= expr DIVIDE expr 
[21] expr ::= expr MOD expr 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [program ::= (*) LBRACE RETURN expr SEMICOL RBRACE , {EOF }]
  [program ::= (*) LBRACE stmtseq RETURN expr SEMICOL RBRACE , {EOF }]
  [$START ::= (*) program EOF , {EOF }]
}
transition on program to state [2]
transition on LBRACE to state [1]

-------------------
lalr_state [1]: {
  [assgnstmt ::= (*) lval DIVIDEASSIGN expr , {SEMICOL }]
  [assgnstmt ::= (*) lval PLUSASSIGN expr , {SEMICOL }]
  [program ::= LBRACE (*) RETURN expr SEMICOL RBRACE , {EOF }]
  [stmt ::= (*) assgnstmt SEMICOL , {ID RETURN }]
  [assgnstmt ::= (*) lval TIMESASSIGN expr , {SEMICOL }]
  [assgnstmt ::= (*) lval ASSIGN expr , {SEMICOL }]
  [program ::= LBRACE (*) stmtseq RETURN expr SEMICOL RBRACE , {EOF }]
  [stmtseq ::= (*) stmt stmtseq , {RETURN }]
  [assgnstmt ::= (*) lval MODASSIGN expr , {SEMICOL }]
  [assgnstmt ::= (*) lval MINUSASSIGN expr , {SEMICOL }]
  [lval ::= (*) ID , {ASSIGN PLUSASSIGN MINUSASSIGN TIMESASSIGN DIVIDEASSIGN MODASSIGN }]
  [stmtseq ::= (*) stmt , {RETURN }]
}
transition on stmt to state [9]
transition on lval to state [8]
transition on RETURN to state [7]
transition on stmtseq to state [6]
transition on assgnstmt to state [5]
transition on ID to state [4]

-------------------
lalr_state [2]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [3]

-------------------
lalr_state [3]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
lalr_state [4]: {
  [lval ::= ID (*) , {ASSIGN PLUSASSIGN MINUSASSIGN TIMESASSIGN DIVIDEASSIGN MODASSIGN }]
}

-------------------
lalr_state [5]: {
  [stmt ::= assgnstmt (*) SEMICOL , {ID RETURN }]
}
transition on SEMICOL to state [47]

-------------------
lalr_state [6]: {
  [program ::= LBRACE stmtseq (*) RETURN expr SEMICOL RBRACE , {EOF }]
}
transition on RETURN to state [43]

-------------------
lalr_state [7]: {
  [expr ::= (*) expr DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [program ::= LBRACE RETURN (*) expr SEMICOL RBRACE , {EOF }]
  [expr ::= (*) expr TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [40]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [8]: {
  [assgnstmt ::= lval (*) TIMESASSIGN expr , {SEMICOL }]
  [assgnstmt ::= lval (*) ASSIGN expr , {SEMICOL }]
  [assgnstmt ::= lval (*) MODASSIGN expr , {SEMICOL }]
  [assgnstmt ::= lval (*) MINUSASSIGN expr , {SEMICOL }]
  [assgnstmt ::= lval (*) DIVIDEASSIGN expr , {SEMICOL }]
  [assgnstmt ::= lval (*) PLUSASSIGN expr , {SEMICOL }]
}
transition on ASSIGN to state [16]
transition on DIVIDEASSIGN to state [15]
transition on PLUSASSIGN to state [14]
transition on MINUSASSIGN to state [13]
transition on TIMESASSIGN to state [12]
transition on MODASSIGN to state [11]

-------------------
lalr_state [9]: {
  [assgnstmt ::= (*) lval DIVIDEASSIGN expr , {SEMICOL }]
  [assgnstmt ::= (*) lval PLUSASSIGN expr , {SEMICOL }]
  [stmt ::= (*) assgnstmt SEMICOL , {ID RETURN }]
  [assgnstmt ::= (*) lval TIMESASSIGN expr , {SEMICOL }]
  [assgnstmt ::= (*) lval ASSIGN expr , {SEMICOL }]
  [stmtseq ::= stmt (*) stmtseq , {RETURN }]
  [stmtseq ::= (*) stmt stmtseq , {RETURN }]
  [assgnstmt ::= (*) lval MODASSIGN expr , {SEMICOL }]
  [assgnstmt ::= (*) lval MINUSASSIGN expr , {SEMICOL }]
  [lval ::= (*) ID , {ASSIGN PLUSASSIGN MINUSASSIGN TIMESASSIGN DIVIDEASSIGN MODASSIGN }]
  [stmtseq ::= stmt (*) , {RETURN }]
  [stmtseq ::= (*) stmt , {RETURN }]
}
transition on stmt to state [9]
transition on lval to state [8]
transition on stmtseq to state [10]
transition on assgnstmt to state [5]
transition on ID to state [4]

-------------------
lalr_state [10]: {
  [stmtseq ::= stmt stmtseq (*) , {RETURN }]
}

-------------------
lalr_state [11]: {
  [expr ::= (*) expr DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval MODASSIGN (*) expr , {SEMICOL }]
  [expr ::= (*) ID , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [39]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [12]: {
  [expr ::= (*) expr DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval TIMESASSIGN (*) expr , {SEMICOL }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [38]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [13]: {
  [expr ::= (*) expr DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval MINUSASSIGN (*) expr , {SEMICOL }]
  [expr ::= (*) ID , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [37]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [14]: {
  [expr ::= (*) expr DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval PLUSASSIGN (*) expr , {SEMICOL }]
  [expr ::= (*) INT , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [36]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [15]: {
  [expr ::= (*) expr DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval DIVIDEASSIGN (*) expr , {SEMICOL }]
  [expr ::= (*) expr PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [35]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [16]: {
  [expr ::= (*) expr DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval ASSIGN (*) expr , {SEMICOL }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [20]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [17]: {
  [expr ::= ID (*) , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}

-------------------
lalr_state [18]: {
  [expr ::= (*) expr DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= MINUS (*) expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [34]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [19]: {
  [expr ::= (*) expr DIVIDE expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= LPAREN (*) expr RPAREN , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [32]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [20]: {
  [assgnstmt ::= lval ASSIGN expr (*) , {SEMICOL }]
  [expr ::= expr (*) MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [21]: {
  [expr ::= INT (*) , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}

-------------------
lalr_state [22]: {
  [expr ::= (*) expr DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr MOD (*) expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [31]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [23]: {
  [expr ::= (*) expr DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr PLUS (*) expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [30]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [24]: {
  [expr ::= (*) expr DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr MINUS (*) expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [29]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [25]: {
  [expr ::= (*) expr DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr DIVIDE (*) expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [28]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [26]: {
  [expr ::= (*) expr DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr TIMES (*) expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [27]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [27]: {
  [expr ::= expr (*) MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr TIMES expr (*) , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [28]: {
  [expr ::= expr (*) MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr DIVIDE expr (*) , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [29]: {
  [expr ::= expr MINUS expr (*) , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [30]: {
  [expr ::= expr (*) MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr PLUS expr (*) , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [31]: {
  [expr ::= expr MOD expr (*) , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [32]: {
  [expr ::= LPAREN expr (*) RPAREN , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MOD expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {RPAREN PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on RPAREN to state [33]
transition on MOD to state [22]

-------------------
lalr_state [33]: {
  [expr ::= LPAREN expr RPAREN (*) , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}

-------------------
lalr_state [34]: {
  [expr ::= expr (*) MOD expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= MINUS expr (*) , {RPAREN SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [35]: {
  [expr ::= expr (*) MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval DIVIDEASSIGN expr (*) , {SEMICOL }]
  [expr ::= expr (*) TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [36]: {
  [expr ::= expr (*) MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval PLUSASSIGN expr (*) , {SEMICOL }]
  [expr ::= expr (*) TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [37]: {
  [expr ::= expr (*) MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval MINUSASSIGN expr (*) , {SEMICOL }]
  [expr ::= expr (*) DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [38]: {
  [assgnstmt ::= lval TIMESASSIGN expr (*) , {SEMICOL }]
  [expr ::= expr (*) MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [39]: {
  [expr ::= expr (*) MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [assgnstmt ::= lval MODASSIGN expr (*) , {SEMICOL }]
  [expr ::= expr (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on MOD to state [22]

-------------------
lalr_state [40]: {
  [expr ::= expr (*) MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [program ::= LBRACE RETURN expr (*) SEMICOL RBRACE , {EOF }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on SEMICOL to state [41]
transition on MOD to state [22]

-------------------
lalr_state [41]: {
  [program ::= LBRACE RETURN expr SEMICOL (*) RBRACE , {EOF }]
}
transition on RBRACE to state [42]

-------------------
lalr_state [42]: {
  [program ::= LBRACE RETURN expr SEMICOL RBRACE (*) , {EOF }]
}

-------------------
lalr_state [43]: {
  [expr ::= (*) expr DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) INT , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) LPAREN expr RPAREN , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [program ::= LBRACE stmtseq RETURN (*) expr SEMICOL RBRACE , {EOF }]
  [expr ::= (*) expr MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) expr MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= (*) ID , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on INT to state [21]
transition on expr to state [44]
transition on LPAREN to state [19]
transition on MINUS to state [18]
transition on ID to state [17]

-------------------
lalr_state [44]: {
  [expr ::= expr (*) MOD expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [program ::= LBRACE stmtseq RETURN expr (*) SEMICOL RBRACE , {EOF }]
  [expr ::= expr (*) MINUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) DIVIDE expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) PLUS expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
  [expr ::= expr (*) TIMES expr , {SEMICOL PLUS MINUS TIMES DIVIDE MOD }]
}
transition on TIMES to state [26]
transition on DIVIDE to state [25]
transition on MINUS to state [24]
transition on PLUS to state [23]
transition on SEMICOL to state [45]
transition on MOD to state [22]

-------------------
lalr_state [45]: {
  [program ::= LBRACE stmtseq RETURN expr SEMICOL (*) RBRACE , {EOF }]
}
transition on RBRACE to state [46]

-------------------
lalr_state [46]: {
  [program ::= LBRACE stmtseq RETURN expr SEMICOL RBRACE (*) , {EOF }]
}

-------------------
lalr_state [47]: {
  [stmt ::= assgnstmt SEMICOL (*) , {ID RETURN }]
}

-------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 0 warnings
  22 terminals, 7 non-terminals, and 22 productions declared, 
  producing 48 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (1 expected).
  Code written to "parser.java", and "sym.java".
---------------------------------------------------- (v0.10k)
