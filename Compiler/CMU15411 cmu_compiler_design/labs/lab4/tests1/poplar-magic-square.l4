#test return 1
// Constructs a magic square and verifies that the sums of each row, column,
// and diagonal are identical.
struct MagicSquare {
    square : int[][];
    dim : int;
    magic_const : int;
};

int main() {
    var m : MagicSquare *;

    m = construct_magic_square(25);
    if (m == NULL) {
        return 0;
    }
    return check_magic_squareness(m);
}

MagicSquare *construct_magic_square(dim : int) {
    var i, j, prev_i, prev_j, val, maxval : int;
    var m : MagicSquare *;

    // This algorithm only works on squares of odd dimension; also check for
    // valid array dimension
    if ((dim & 1) == 0 || dim <= 0) {
        return NULL;
    }

    m = new(MagicSquare);

    // Magic constant depends only on dimension of square
    m->magic_const = (dim * dim * dim + dim) / 2;
    m->dim = dim;

    // Allocate square
    m->square = new(int[][dim]);
    for (i = 0; i < dim; i += 1) {
        m->square[i] = new(int[dim]);
    }

    // Start in center of top row
    i = 0;
    j = dim / 2;
    // Fill square with numbers incrementing from 1
    maxval = dim * dim;
    for (val = 1; val <= maxval; val += 1) {
        m->square[i][j] = val;
        // Move up and right, unless that is filled; then just move down
        prev_i = i;
        prev_j = j;
        if (i == 0) {
            i = dim - 1;
        } else {
            i -= 1;
        }
        j = (j + 1) % dim;
        if (m->square[i][j] != 0) {
            i = (prev_i + 1) % dim;
            j = prev_j;
        }
    }

    return m;
}

int check_magic_squareness(m : MagicSquare *) {
    var i, j, sum : int;

    // Sum all rows
    for (i = 0; i < m->dim; i += 1) {
        sum = 0;
        for (j = 0; j < m->dim; j += 1) {
            sum += m->square[i][j];
        }
        if (sum != m->magic_const) {
            return 0;
        }
    }

    // Sum all columns
    for (j = 0; j < m->dim; j += 1) {
        sum = 0;
        for (i = 0; i < m->dim; i += 1) {
            sum += m->square[i][j];
        }
        if (sum != m->magic_const) {
            return sum;
        }
    }

    // Sum row increasing diagonal
    sum = 0;
    for (i = 0; i < m->dim; i += 1) {
        sum += m->square[i][i];
    }
    if (sum != m->magic_const) {
        return 0;
    }

    // Sum row decreasing diagonal
    sum = 0;
    for (j = 0; j < m->dim; j += 1) {
        sum += m->square[m->dim - 1 - j][j];
    }
    if (sum != m->magic_const) {
        return 0;
    }

    return 1;
}
