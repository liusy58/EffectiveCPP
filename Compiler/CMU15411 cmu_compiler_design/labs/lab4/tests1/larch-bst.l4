#test return 1854

// Obligatory bst test

struct bst {
  value : int;
  left : bst*;
  right : bst*;
};

int main() {
  var tree : bst*;
  var values : int[];

  values = new(int[10]);
  values[0] = 36;
  values[1] = 45;
  values[2] = 12;
  values[3] = 409;
  values[4] = 23;
  values[5] = 5;
  values[6] = 999;
  values[7] = 394;
  values[8] = 2;
  values[9] = 42;
  tree = maketree(values, 10);

  return find(tree, 12) +
         find(tree, 999) +
         find(tree, 409) +
         find(tree, 45) +
         find(tree, 394) +
         find(tree, 2345) +
         find(tree, 0) +
         find(tree, 82) +
         find(tree, 1111) +
         find(tree, 90);
}

bst* maketree(vals : int[], count : int) {
  var i : int;
  var tree : bst*;
  tree = newtree(vals[0]);
  for (i = 1; i < count; i += 1) {
    insert(tree, vals[i]);
  }
  return tree;
}

bst* newtree(rootval : int) {
  var tree : bst*;
  tree = new(bst);
  tree->value = rootval;
  return tree;
}

int insert(tree : bst*, value : int) {
  if (value == tree->value) {
    return 0;
  } else if (value < tree->value) {
    if (tree->left == NULL) {
      tree->left = new(bst);
      tree->left->value = value;
      return 0;
    } else {
      return insert(tree->left, value);
    }
  } else {
    if (tree->right == NULL) {
      tree->right = new(bst);
      tree->right->value = value;
      return 0;
    } else {
      return insert(tree->right, value);
    }
  }
}

int find(tree : bst*, value : int) {
  if (tree == NULL) {
    return -1;
  } else if (tree->value == value) {
    return value;
  } else if (value < tree->value) {
    return find(tree->left, value);
  } else {
    return find(tree->right, value);
  }
}
