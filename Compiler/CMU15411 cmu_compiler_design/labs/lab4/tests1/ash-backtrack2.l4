#test return 6

extern int printchar(c : int);

// construct all permutations

bool isSolution(a : int[], k : int , n : int) {
  return k == n;
}

int constructCandidates(a : int[], k : int, n : int, c : int[]) {
  var i, nc : int;
  var inPerm : int[];
  
  inPerm = new(int[n + 1]);
  
  for (i = 0; i <= n; i += 1) inPerm[i] = 0;
  for (i = 0; i < k; i += 1) inPerm[ a[i] ] = 1;
  
  nc = 0;
  for (i = 0; i <= n; i += 1) {
    if (inPerm[i] == 0) {
	  c[nc] = i;
	  nc += 1;
	}
  }
  
  return nc;
}

int processSolution(a : int[], k : int) {
  var i : int;
  
  printchar(91);
  printchar(32);
  for (i = 1; i <= k; i += 1) {
      printchar(48 + a[i]);
	  printchar(32);
  }
  printchar(93);
  printchar(10);
  
  return 0;
}

int main() {
  var a : int[];
  var n : int;
  
  n = 3;
  a = new(int[n + 1]);
  
  return backtrack(a, 0, n);
}


// general backtracking algorithm

int backtrack(a : int[], k : int, n : int) {
  var c : int[];
  var i, ncandidates, MAX_CANDIDATES, solutions : int;
  
  solutions = 0;
  MAX_CANDIDATES = n;
  c = new(int[MAX_CANDIDATES]);
  
  if (isSolution(a, k, n)) {
    processSolution(a, k);
	solutions = 1;
  }
  else {
    k += 1;
	ncandidates = constructCandidates(a, k, n, c);
	for (i = 0; i < ncandidates; i += 1) {
	  a[k] = c[i];
	  solutions += backtrack(a, k, n);
	}
  }
  return solutions;
}
