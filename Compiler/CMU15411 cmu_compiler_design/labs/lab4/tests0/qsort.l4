#test return 1

int qsort (A : int[], left : int, right : int) {
  /* sort A[left..right] */
  var lower, upper : int;
  var pivot : int;
  if (left >= right) return 0;	/* singleton or empty: sorted */
  lower = left;
  upper = right;
  pivot = A[right];
  while (lower < upper) {
    /* left <= lower < upper <= right
     * A[left..lower-1] <= pivot
     * A[upper+1..right] > pivot
     * A[left..right] = A[left..lower] u pivot u A[upper+1..right]
     */
    if (A[lower] <= pivot) {
      lower += 1;
    } else {
      A[upper] = A[lower];
      upper -= 1;
      A[lower] = A[upper];
    }
  }
  /* lower == upper */
  A[upper] = pivot;
  qsort(A, left, lower-1);
  qsort(A, upper+1, right);
  return 0;
}

int is_sorted (A : int[], n : int) {
  var i : int;
  for (i = 0; i < n; i += 1)
    if (A[i] != i) return 0;
  return 1;
}

int main () {
  var i,n : int;
  var A : int[];
  n = 938;
  A = new(int[2*n]);
  for (i = 0; i < 2*n-1; i += 2) {
    A[i] = i;
    A[i+1] = 2*n-(i+1);
  }
  qsort(A, 0, 2*n-1);
  return is_sorted(A, 2*n);
}
